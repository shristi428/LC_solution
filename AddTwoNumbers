You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

code:-
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
         
    ListNode dummy_head=new ListNode(0);//to display the final result
        ListNode l3= dummy_head;//add the elements in this node;
        int carry=0;
        while(l1!=null||l2!=null){
            
            int l1_val=(l1!=null)?l1.val:0;
            int l2_val=(l2!=null)?l2.val:0;
            
            int current_sum= l1_val+l2_val+carry;
            carry=current_sum/10;
            int last_digit=current_sum%10;
            
            ListNode new_node=new ListNode(last_digit);
            l3.next=new_node;
            if(l1.next!=null)l1=l1.next;
            if(l2.next!=null)l2=l2.next;
            l3=l3.next;
            
        }
        if(carry>0){
            ListNode new_node=new  ListNode(carry);
            l3.next=new_node;
            l3=l3.next;
            
        }
        return dummy_head;
        
    }
}
the code is exceed the time limit
New Solution:-
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode n1=l1,n2=l2,head,cur;
        head=cur=new ListNode(0);
        int carry=0,rem=0,sum=0;
        while(n1!=null||n2!=null||carry!=0){
            sum=(n1!=null?n1.val:0)+(n2!=null?n2.val:0)+carry;
            carry=sum/10;
            rem=sum%10;
            cur=cur.next=new  ListNode(rem);
            n1=(n1==null? null:n1.next);
            
            n2=(n2==null?null:n2.next);
            
        }
        return (head.next==null?null:head.next);
        
    }
}

